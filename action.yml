name: 'Release'
description: 'generate new version, upload to s3, push tags and send to gitops'
inputs:
  aws_account:
    description: 'AWS account (shared) to upload released artifacts to'
    required: false
    default: ''
  dev_release:
    description: 'Used to make dev release - no release tagging, just upload binaries'
    required: false
    default: 'false'
  gh_token:
    description: |
      Powerful token that allows to call other GH actions in the organization
      Needed to push in tt-gitops, not used for dev release
    required: false
  upload_s3:
    description: 'Upload to S3'
    required: false
    default: 'true' # true - upload to S3 if 'dist' dir exist. false - do not upload to S3
runs:
  using: "composite"
  steps:
    - name: Init
      id: init
      shell: bash
      # convention: if 'dist' directory exists, then upload to S3
      # this action is called in context of the service repo, so GITHUB_REPOSITORY has format of 'agilecustoms/tt-web'
      run: |
        echo "debug"
        echo "${{ inputs.aws_account }}"
        echo "${{ inputs.dev_release }}"
        echo "${{ inputs.gh_token }}"
        echo "${{ inputs.upload_s3 }}"
        
        if [ "${{ inputs.upload_s3 }}" == "true" ] && [ -d dist ]; then
          echo "upload_s3=true" >> $GITHUB_OUTPUT
          if [ -z "${{ inputs.aws_account }}" ]; then
            echo "AWS account is required to upload /dist in S3" >&2
            exit 1
          fi
        fi
        
        if [ "${{ inputs.dev_release }}" == "false" ] && [ -z "${{ inputs.gh_token }}" ]; then
          echo "GH token is required to push tags (dev_release = false)" >&2
          exit 1
        fi
        
        echo "service=$(echo "${GITHUB_REPOSITORY}" | awk -F'/' '{print $2}')" >> $GITHUB_OUTPUT

    - name: Generate new version
      if: inputs.dev_release == 'false'
      id: generate
      uses: anothrNick/github-tag-action@v1 # https://github.com/anothrNick/github-tag-action?tab=readme-ov-file
      env:
        DRY_RUN: true # just generate new version, do not push tag

    - name: S3 key
      if: steps.init.outputs.upload_s3
      id: s3_key
      shell: bash
      run: |
        key="${{ steps.init.outputs.service }}/${{ steps.generate.outputs.new_tag }},${{ steps.init.outputs.service }}/latest"
        if [ "${{ inputs.dev_release }}" == "true" ]; then
          key="${{ steps.init.outputs.service }}/${{ github.ref_name }}"
        fi
        echo "key=$key" >> $GITHUB_OUTPUT

    - name: Login AWS
      if: steps.init.outputs.upload_s3
      id: creds
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-region: us-east-1
        role-to-assume: arn:aws:iam::${{ inputs.aws_account }}:role/ci/builder
        output-credentials: true

    - name: Upload S3
      if: steps.init.outputs.upload_s3
      uses: agilecustoms/gha-upload-s3@main
      with:
        access-key-id: ${{ steps.creds.outputs.aws-access-key-id }}
        secret-access-key: ${{ steps.creds.outputs.aws-secret-access-key }}
        session-token: ${{ steps.creds.outputs.aws-session-token }}
        source-dir: 'dist' # after 'download-artifact' step, there are assets in 'dist/*'
        bucket: 'agilecustoms-dist'
        bucket-dir: ${{ steps.s3_key.outputs.key }}
        tags: Release=${{ inputs.dev_release == 'false' && 'true' || 'false' }}

    # TODO: if Send to GitOps fail and I rerun this action - I get error that tag 1.27.2 already exists
    - name: Push tags
      if: inputs.dev_release == 'false'
      shell: bash
      run: |
        git tag -d latest 2>/dev/null || true
        git tag latest
        git tag ${{ steps.generate.outputs.new_tag }}
        git push origin latest ${{ steps.generate.outputs.new_tag }} --force

    # I can not use placeholders in 'uses' section, so workaround is to have a step per project: tt (TimeTravel), rc (RapidCBP), etc.
    - name: Send to tt-gitops
      if: inputs.dev_release == 'false' && startsWith(github.repository, 'agilecustoms/tt-')
      uses: agilecustoms/tt-gitops@main
      with:
        service: ${{ steps.init.outputs.service }}
        version: ${{ steps.generate.outputs.new_tag }}
        token: ${{ inputs.gh_token }}

outputs:
  version:
    description: "Newly released version"
    value: ${{ steps.generate.outputs.new_tag }}
